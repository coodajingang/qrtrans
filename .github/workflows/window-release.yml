name: Build and Release Python EXE

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-2019
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
          
    - name: Download dependencies packages
      run: |
        mkdir python_packages
        pip download -r requirements.txt -d python_packages
        
    - name: Create offline install script
      shell: powershell
      run: |
        @"
        @echo off
        echo Installing Python packages...
        pip install --no-index --find-links python_packages -r requirements.txt
        echo Installation complete!
        pause
        "@ | Out-File -Encoding ascii -FilePath "install_dependencies.bat"
        
    - name: Zip dependencies
      run: |
        7z a python_dependencies.zip python_packages requirements.txt install_dependencies.bat
             
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Find DLL files
      shell: powershell
      run: |
        # 找到 Python 安装目录中的 libiconv.dll
        $pythonPath = (python -c "import sys; print(sys.prefix)")
        $dllPath = Get-ChildItem -Path $pythonPath -Recurse -Filter "libiconv.dll" | Select-Object -First 1
        if ($dllPath) {
            Copy-Item $dllPath.FullName -Destination .
            Write-Host "Found and copied libiconv.dll"
        } else {
            Write-Host "libiconv.dll not found"
        }
        
    - name: Create PyInstaller Spec Files
      shell: powershell
      run: |
        @"
        # -*- mode: python ; coding: utf-8 -*-

        block_cipher = None

        a = Analysis(
            ['sender.py'],
            pathex=['.'],
            binaries=[('libiconv.dll', '.')],
            datas=[],
            hiddenimports=[
                'numpy',
                'PIL',
                'PIL._tkinter_finder',
                'PyQt6',
                'cv2',
                'pyzbar'
            ],
            hookspath=[],
            hooksconfig={},
            runtime_hooks=[],
            excludes=[],
            win_no_prefer_redirects=False,
            win_private_assemblies=False,
            cipher=block_cipher,
            noarchive=False,
            collect_all=['numpy', 'PIL', 'PyQt6', 'cv2', 'pyzbar'] 
        )

        pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

        exe = EXE(
            pyz,
            a.scripts,
            a.binaries,
            a.zipfiles,
            a.datas,
            [],
            name='sender',
            debug=False,
            bootloader_ignore_signals=False,
            strip=False,
            upx=True,
            upx_exclude=[],
            runtime_tmpdir=None,
            console=True,
            disable_windowed_traceback=False,
            argv_emulation=False,
            target_arch=None,
            codesign_identity=None,
            entitlements_file=None,
            bundle_identifier=None,
            append_pkg=True,
        )
        "@ | Out-File -Encoding UTF8 sender.spec

        @"
        # -*- mode: python ; coding: utf-8 -*-

        block_cipher = None

        a = Analysis(
            ['receiver.py'],
            pathex=['.'],
            binaries=[('libiconv.dll', '.')],
            datas=[],
            hiddenimports=[
                'numpy',
                'PIL',
                'PIL._tkinter_finder',
                'PyQt6',
                'cv2',
                'pyzbar'
            ],
            hookspath=[],
            hooksconfig={},
            runtime_hooks=[],
            excludes=[],
            win_no_prefer_redirects=False,
            win_private_assemblies=False,
            cipher=block_cipher,
            noarchive=False,
            collect_all=['numpy', 'PIL', 'PyQt6', 'cv2', 'pyzbar'] 
        )

        pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

        exe = EXE(
            pyz,
            a.scripts,
            a.binaries,
            a.zipfiles,
            a.datas,
            [],
            name='receiver',
            debug=False,
            bootloader_ignore_signals=False,
            strip=False,
            upx=True,
            upx_exclude=[],
            runtime_tmpdir=None,
            console=True,
            disable_windowed_traceback=False,
            argv_emulation=False,
            target_arch=None,
            codesign_identity=None,
            entitlements_file=None,
            bundle_identifier=None,
            append_pkg=True,
        )
        "@ | Out-File -Encoding UTF8 receiver.spec

    - name: Find and Copy Python DLLs
      shell: powershell
      run: |
        $pythonPath = (python -c "import sys; print(sys.prefix)")
        # 复制 python dll
        Copy-Item "$pythonPath\python312.dll" -Destination .
        # 复制其他可能需要的 DLL
        if (Test-Path "$pythonPath\DLLs") {
            Copy-Item "$pythonPath\DLLs\*.dll" -Destination .
        }

    - name: Update spec files with Python DLL
      shell: powershell
      run: |
        # 修改 spec 文件，在 binaries 中添加 Python DLL
        $sender_spec = Get-Content sender.spec -Raw
        $sender_spec = $sender_spec -replace "binaries=\[\('libiconv.dll', '\.\'\)\]", "binaries=[('libiconv.dll', '.'), ('python312.dll', '.')]"
        $sender_spec | Set-Content sender.spec
        
        $receiver_spec = Get-Content receiver.spec -Raw
        $receiver_spec = $receiver_spec -replace "binaries=\[\('libiconv.dll', '\.\'\)\]", "binaries=[('libiconv.dll', '.'), ('python312.dll', '.')]"
        $receiver_spec | Set-Content receiver.spec
    
    - name: Build EXE files
      run: |
        pyinstaller sender.spec
        pyinstaller receiver.spec
        
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        files: |
          dist/sender.exe
          dist/receiver.exe
          # python_dependencies.zip
        body: |
          ### 发布内容
          1. 可执行文件
            - sender.exe
            - receiver.exe
          
          2. Python 开发环境依赖包 (python_dependencies.zip)
            - 解压后运行 install_dependencies.bat 安装所有依赖
            - 需要已安装 Python 3.12
          
          ### 系统要求
          - Windows 7 或更高版本
          
          ### 离线安装 Python 依赖的步骤
          1. 解压 python_dependencies.zip
          2. 运行 install_dependencies.bat
          3. 等待安装完成
          
          ### 注意事项
          - exe 文件可直接运行（所有依赖已打包）
          - 离线依赖安装需要 Python 3.12 环境
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Debug Info
      shell: powershell
      run: |
        Write-Host "Python Path:"
        python -c "import sys; print(sys.prefix)"
        Write-Host "DLL Files in current directory:"
        Get-ChildItem -Filter *.dll
        Write-Host "Python executable location:"
        Get-Command python | Select-Object Source
    
    - name: Upload artifacts (for manual trigger)
      if: github.event_name == 'workflow_dispatch'
      uses: actions/upload-artifact@v3
      with:
        name: executables
        path: |
          dist/sender.exe
          dist/receiver.exe
          python_dependencies.zip
